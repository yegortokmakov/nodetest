name: Cloudfleet CI/CD

# This workflow runs when any of the following occur:
# - A push is made to a branch called `main` or `seed`
# - A tag starting with "v" is created
# - A pull request is created or updated
on:
  push:
    branches:
      - main
      - seed
    tags:
      - v*
  pull_request:
  # This creates an environment variable called `IMAGE_NAME ` with the value `ghtoken_product_demo`.
env:
  IMAGE_NAME: ghtoken_product_demo

jobs:
  push:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Install Cloudfleet CLI
        env:
          NONINTERACTIVE: 1
        run: |
          curl -fsSL https://downloads.cloudfleet.ai/apt/pubkey.gpg | tee /usr/share/keyrings/cloudfleet-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/cloudfleet-archive-keyring.gpg] https://downloads.cloudfleet.ai/apt stable main" | sudo tee /etc/apt/sources.list.d/cloudfleet.list
          sudo apt update
          sudo apt install cloudfleet

      - name: Configure Cloudfleet CLI
        run: cloudfleet auth add-profile token default ${{ vars.CLOUDFLEET_ORGANIZATION_ID }} ${{ vars.CLOUDFLEET_API_KEY }} ${{ secrets.CLOUDFLEET_API_SECRET }}

      - name: Configure Kubeconfig
        run: cloudfleet clusters kubeconfig ${{ vars.CLOUDFLEET_CLUSTER_ID }}

      - uses: azure/setup-kubectl@v4
        name: Setup kubectl

      - run: kubectl cluster-info

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - uses: engineerd/configurator@v0.0.10
        name: Set up Skaffold (x86_64)
        if: runner.arch == 'X64'
        with:
          name: skaffold
          fromGitHubReleases: true
          repo: GoogleContainerTools/skaffold
          urlTemplate: https://github.com/GoogleContainerTools/skaffold/releases/download/{{version}}/skaffold-linux-amd64
          version: v2.9.0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: engineerd/configurator@v0.0.10
        name: Set up Skaffold (arm64)
        if: runner.arch == 'ARM64'
        with:
          name: skaffold
          fromGitHubReleases: true
          repo: GoogleContainerTools/skaffold
          urlTemplate: https://github.com/GoogleContainerTools/skaffold/releases/download/{{version}}/skaffold-linux-arm64
          version: v2.9.0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy the application using Skaffold
        run: skaffold deploy --images=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME --tag=latest -p production
